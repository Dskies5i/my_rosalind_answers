from bio_struct_ import RNA_Codons

# https://scipython.com/book/chapter-5-ipython-and-ipython-notebook/examples/rna-codons/
# https://www.youtube.com/watch?v=mJDe5QG2L9k&list=PLpSOMAcxEB_jUKMvdl8rHqNiZXFIrtd5G&index=15&ab_channel=rebelScience

rna = "AUGCCCGGUAAACCUCGGAGAUCGGGAAGACGAAUGACCUUCCCCAGUGUCGGGGGUUUAGACCUUAAAGCCCGCGUAUGGUAUAAACUGCAGUGGAGCGAUAGCAAAAGCGUUGCGGGGGAGGAGCAACAGGUGUUAGGGGCCUCGGACGACGUGCUGCAUCCCUCACACAUGCGGCUCGAGACGCCGAAGCCUAAUGGCCGCGAUUGUAAACCAAUUGAGCUCUCACCGGCCCUACACUUUCUAGGCAACCGGGUUGAUUCAGGGGUAGAGUCGGGAGUUAGAUCUUCAGGCUACCGCACUCCGAAUGGCGUCGUCGAACGUGGAGUCGCUGCCGUAGAGGGCCAUGGCGCUGUGGGGGAUGUGUUGAGCGGUGCCAUGCUGCACACUAUAGUAGGGGGGUCCGAAUUAAAUAGGUGCGGAGGCUGUCGACAAGCCACACAAGCCGUAGUUUGCAUCAACAUCCCCAUGAUAGCCUCCGUACUUAUUCUGAUGAGAUUACAAGGUGGUUCCGGGAGUGGGGCCCUGAUUCUCUUACUGGGCUUACCUCUUGGGGGUUUUCGAGCAAUGCCCAAGCGACGUUUUCAGUCUGUCCAAUACAGGUUGCGUCCAUUAGUCCCUCAAGAACCCAUAAGUCCUGCAGUCCUACUUCCGAGAAGAUACUGCGAAGUCGAGUACCUACCGAAGAUCACGAUGUUCGUAGCACUCUCCACGACACGUUCAAGAGAUGCCUCACGCGAAGGGGGUGAAUUCUGUUCUGCGUCCAACAUUUACUCUUACCCGACGGCAUUCACCAUCAUCAAGGACAAUCGCGUGGAUGCGAAUAACGUGUGCCGACCGAAGGCGCAGACAAACGAGGCUACAGCCCCUCCCAAAAGUCAGGAGUUGUGGAGGUGUACUCUGAGCGUAGUGGUUCCCAAAUGCCAUAUACAGCAGCAAGAAGAAGAGAAUACCACGCGCUGGAUGGCAAUACAAGACUGCCGGACGGUCCUAAACGCCUCGCGGGCGUGGCAGCAUAUCGUGCUCUUACUACUCCGAAUCCCGUUGCUUAUAUUGUAUUCGUAUAAACAACGCGUUGACAAGUUGCUCAAAAUAGGGAAAGGCUCGUCCCAGCAGGGCAGACUGCUUUCUAAUUGCUGCGCUUCAGCGACCCGCAAUUUAUGCGGACGAGCAUGGCCAUAUAAAGCGCGUGAGGGCAACCUAUAUUUAAGUGGAUAUCCAUGCCUAGUAUCGGGGAGUGCGCCAUCCCCGUAUCUUACUUGUAUUAAUGAAAAACGUAAUCUGGGCAUUAAUACAUGCUUACUGGACGUCUCAUGGGCUAUGCACCUCGGCUACGGCGUAAUUCGGUCCCAUGCGCAAUCCCUCCACGUAGGAAGAGAGGUUACCCGAUCCCAAGAGUUUACGCCCGGGAAAGCCGGAAUAAAGGUGCGCAAUGGGAUGGGCGGUUUCCAGUGUUUUUGGCUCCGAAUUAGAAUGAUAUUAACGUCUAGGGCAGCAAUUCCACGUUCCAGACACACGUACGGGUGCACCAAAGUUCUCCACAUGCGAUGCCUCAGCUGUAACUACACUAACCGUACUUACAACAGCAAGUACCAGUUCCGUCCAACGAUUCAUCCGAUGUCUCCUUGGGUGACUACAUCAAGGAUUCAGUUAUUCCUUGUUCCUGCUAUCCGUAAGUUCCGUGGCAAUCCGACCAGUACUUUGACACGUACAUCGCGACGUCCAACACCUGGCCUGCGUCGAAAGCGGCCCAAAAAUCCGCAAUUUCCGAACGUACUUUUGCUCUCAAGUGACGGGCUCUAUUGCGCGGCGAUGCCAUUUGUUGAUGCUAUUUCUCGCUCCCGCUGCCAGAGAUGCGUCUCUGGAUCGCGAUAUGAGCGCUUACGGUUAGAUAAUCUUGCAGCGUCUGCUGGAGAAGAGGAGUGGCUGCUAAAUGCGUUUUGUUCUAGCGAACUGACGAGAAGAUAUCAAAUUGAGCGUAUCAUGGCGUCCCAAUCCGGCAUUGCGCGCUGCGGACAACCUCUAAAAUUUCGAGACCUUGUUGCGAACUUACCAAGUUUGGUACAUAGCUUGUCCUGCCUGUGCUGUGGUCUGCUUCACCUAAGCUACGGAGUUACCACCGGACAAGAAACCGCUAGCAAGGCUGAGGAACCAUUUUGGCCAGCCGUCGCACAUCCGGCAGACGACGCUACUGUCAGAACACCGCUACUCAAGACAUUAUUCUACUUUGUUACCCCUCUGACACUCAAGUUGGGGAGGCAAUUCUGUUACGAUCGCAGCGCGCCGUUGCCUAGGAUUAUAAUCGUCCUUACCUGCGUGGUCUACAGUAUACUCGUGAUUACGGUUGGCGUAGUUAACUCCAUUUGCCUGCCUAGAAAAUUACGCAUGAUGAGCAGGUUUCUGGGAUACUUGCUUCGCUGUAAUAGAUUCAAUGUCAGUCGUCUUGAGUGUGCACUGUUUUUAUUGGCGAUAGUCGGUUACGGGGACUUGGCGCGAGGCUGUAGGUCGUGUAAGCAUCUAGGUUCUGGGUCUAGACCAGGUUAUGGUGUGCUAAUUAUUGGGUGGUUGUGCGUGCCAGUCCAACUUGUUCCCAGUAAAUCUCCAGUCCAUGAUCCUUCUCGUCUACUAAUAAGACUCACCGUGGCCAUUGGUGGAUUGUUGAUUGUUACAAACCCGACGGUCCAACUGAUGGAUGGGAUCUAUAUACCCAAUUCAGUGGUGAAAUCACGCUCGAAACGUGAUGGGUGGAUGUUUUCGGAGAGAUGGGGCCGCAAGCAACGGGGUAAACGGGACUUAAUGACCUCACUCUUCGGGGCCAGACCAGGUAACAUCGUCAGACCGGUCGCCGCUCCACAGAUUUACACGGACCUCGUUGAUCAUCGCACCUCGCUCACGCACAACGGACAUUGGCGAUAUAGCUGUUCUGUCAUGCAUGUUCCCGGCGCAAAGAAGCCGUUCCAUAUCAUAUUAACCUUAGAGGAGAGAGUAGAGACGUGUUCCCCCAGAUCAGAACGCACGCGAGCUAACGCAAUUAACUGCACUAUACACCUCCUUCGGCACGAACAAGAUCGGGGAGUCUCGUGCCUGGCAGGGUCUAUCAUGGGGCCAGGAAUUAAAUUCACUUAUCCCCCAAGUUUUUGGUUGCACCCUCAAACGGAGUUAGACCGGUGCCCAAGACAGUUACACUCUUCGAUAUGUAGCGAUUCGCCGCCAAGUGCCACUGACAUAAUUCGAACCUUAAAAGCAUAUCGCGGUUUUGUGAGCGAGACACCUUGGGAACGCAAACCGUACAGAAUAUUUUUCUGCUCGACAGUCGCGAAUCUUGGCUGCCUGGACCAAACAGGAGGUAGCGACCUGCCACCUACCCGUCAUGGCAUGCCGAUCGCAGACGCAUUUGCGCGAUCGCCAUCCCCUCGAGCGCCUCCUAAACCCUUGACUCACCCGGCAUACCUAUCGCAUCACAGGGCAGGUUUCCACCUGAACAAGUUGAUAGUCGACCUAAGCGGUUUGCGCAGCUCUCCCUCACGUCGACCGCGUCACGAGAUCCAAGUGUUGACACCUUGGUUAGGGUUGACUGGAUUCCGGGACCGGUUCGCCAAGUCCACCUGCACGCUGCUUAGUAACGGGACAUCCCCUGCUACCGUGGGGUUUGUGGAGAAACCGCACUCUACAUCCGACCGGGUGGAGCGUAUGUCUUCUGAACAGCCGACCCCCCCUGCUGCCUCCAGGUACCCCUUUACCUUUACAUGGGAAUUCUGUUGUGGAAACGAGCUGGCAAUUUGCCUGGUUGACUGCUCAAUAUUCGUAGGCGGUAAACAAACGCCGACGGGCCCAAGCCCCGAGUCUACAACGACCAAUCUAGAAUCCAACUCACCGAGCUUGAACCUAGGUGCCCUUCGCAACAACCCUUCCUGCAGGGGUGGCCAUGACAAUUCAACGAGUAAAGUGAACGUACUGAUCAAAUUGUCGGUGUACAGGUACAUAUUCUUCCAACCAACACGGGCACACUACUGUUGCUCGAUUGCUCCCAGGAAUAUGACUAUUAAUCUACAUUUUUGGAAGCUGCUUGCAUUGCGGGCUAGCGCCCCAACAGCUCCCGAAUCCAGGGUAUUGUGGAGCUGUCAUGCCGAGUGGGCAGGCCGAUUGUCGGGCCGUGUACCAGUGCGUGGGGGUCAGUGCCUAUACAGCAGAAUGGUCCUUGGCCGUGACAGAAGUAUUGAAGCCUCUUAUCUGGCUGGUUCUUCCUGCUGUACACGACACUUGCCAGAAUACAAAUGUACUAGACUGGCUCAGACUUCCGGGCUCGGCAUAGCUGAUCAAGGAAAUCGCAUCAACCUGUACCGAUCUCAGCGAUCACGUCCAGUGAACAGUGCUUCGUGCCCAAGACCGCUUAAUAAUACUGGAAGCGUUCUCAGAGAUCGCUGUUUGUCAUUUAAUGGAUGUCUCUCAGAUAACUAUCAGGCUAACACUAUUGAACAAUUCAUGUCUGGUAUUGCCACGGGAUGCUCGCACUCGAAGAGCCGAAGAGGUGAAUCCCAUAGUGAUGCGGAUUUUGCUGUUGCAGUCGAAACGGGCGGGACAAGAAGUGCGCAAGAUCUCACGCCAGUUAAGAAAUCCUCACCCGAGUGUUCCAUUGCACUGUUAGAAAUAUCACAAAUCGUUUCCAAAAGAUUGCUUAUAAUCGUAUGCGGAAGUACUGUAUCCUUCCCUACAUUUUUACGUAGUAGAGAAUUCCUAGAUGUCUGCUGUAAACGACUACGAAAUUUCGUUAAACAGAGCGUCGCAAAACCAGCGAGGGGUAAUGAGCUAUCAAAGAGUCUGCAUCCAUCGCUGGACAUCCGGGCGCUUAGGCGUAAGUCCGGGCAUCCCAUCCCAGUGCCGUCCUUACUUAGCGUCGUAUUCCACGCACCUCUAUUGUUCUCGAUCCUGACUUCUAACGAGUCUUCUGGGUUCCGGCAAAUGUUGCUGGGCACGUAUUGUCACGAGCGGUUUUACUCCGGGCCUUUAACCGAGAAAUUACAGGCGGAUCUAGGGUGGCCGCAUAGAGUGGACGCGUGUUCGGUCGGAAUACUAUCUUCACACAUUAUACUACCCACGGAGCGCCUUCAAGUCGACCCUUAUAAACUAGCCUCGAGUAGCGGGUUCAAUAGUGGAGGCGCGAUAAAGCUAUCGCCCGUGGAUCUCGAUACUAAAAUCCGCGCAGGUCGAUGCUUGGACAGGCUCCUCUUGGGAGAUCCGGCGGUACUUUGUCAUCCGCCAAGUGCUCAAGCGUCUGUGGGAGAUAUUCUCGGGUACACUAACUCCAUUCUGCUUGGACAACGCUGUCAUGUUAUGUGCUUCGAGCAGCGAGAGGUCACUGAUCAACCUCGGCUACCCACAAGUGGCGGACCGGACAAGGAACACGCAGAGUUGUUACUUUUAGAAGCCGCAACUUUUCCUCUAGCGGUCCAUAGAUCCCAGACAAUGCUACCCGUUCGCUGUACUUCCAUACGGACAGUCCUGCCGUUUUAUCACAAUGACGUGUGGCAGGGGGAGGGGAUCACACCCAUAUGCGCGGCUGAUCCUAUACAGUACACAAGCUGCCGCAAUUUCAUGGUAUCUGCAAUGGCUGCGCUGUCAGCAGAUCGUGAUAGUCAACCCGGCGACAGCGCGAAUUGUAGCAGUCAUCCCCUGGAUUAUCCAAGUAUGGGCUACAACUUCGCUGUUUGGUUUGUUUCCCGCAAGGACACGAGGAGAACAUACAAAGUAGAACCCAAGAUAACCUCACUCCUAGGCGGCAAUGCAGAGACCGGACACCCCCUUCCAUCAACGAGCAAAAUGUACACACAGCCUAUAAAACUCGGGUCCCCUCUCACGUCGGAGAACGUCAUGGACGAACGAGGCGGCCGACCUCGGCCGCCAUCAGUCGUUCAUUUGCAUUGCGGUUGUUUCACCUAUGCCAUCUGUGACUCCAUUUUCUUCUACAUGCCAACUCGUCAAAACGUUAUCGAGAUAGCUGAUAGAUACAGCGGAAUAUUACAGCGGUCGAAUUCGACGGGCGCUGACCAAAGGAGAGUUCUACCGCCGUCCCUGCGCAUGUCGAACUCCAUUCAGCUAGUUGACACGUCCUCGGUUUUUGUGAUUUAUUUUCGCGGAGAUUCAGGAACCUCUAGUAUGACUUUUUUCGGUCGUCGGCCGUCUGUGUUUAGAUACGUGAUUCUACUCCCGUACGCAACUAUACGCCUUUCUGUAGGUGCUGAGCUUCUGGGGGGAUCGGAGCACAAACAACGAUGCGGUCCGGGUAUCGUUUGCUUAAAUAGACUCGUAUGCCUAAAGUUUCAAAGACCCAAAAUUAGAAGUCCGAACGUGUCGAUUCGGUCAGCUGACACGCGGGUUCACGAUUGUAAAAAGAUCCUUCAAGCGCCCUACAAACGCGCAUAUUACGGUAUCCUAGGCAUUCGGAGUAGAUAUAGAAACACUCCCAGCGACACCACCUGCCUACGAAGCAGCGAGCCAUCUCAUUGUCUAGGCGUUCGGAACAACGCCGGUAUGACCAUCACGCCUAGGUUCAGUCCUUAUGAAAAUAAGGGAUUGAAAGCCGCCCCCAAAAUCUUUCCAGCGCUCUAUAUUAACUUGCCGCUUCCGCUGGUUUUAACUCGUAAACUGGCAACCCAGCAAACAUCAAUGGAUGAAUUGGGGUUAAACGAUGAACCUUUUCACCCAAGCUAUAUACUGCCACCCUUGGUAUUGACCCCUACUUUCUUCGUUGUGCAGUUUGGAGUUCAGAGACCUAAGAUUUGUAACUGGCAUAGGAACUUAACGUCGCGCGUAAUGGAUCGAUGUCAGCAUGUUGCCAAGGUUAUAGUCCUUCGUCUCCCCCACCGCCUAGACUACGCAAUGGUUCACGGCCUUGUGCGCUCAUCAGCGUUCGAACACGCCGGACGCCACUCCAGGAACCGUCGUUUGGAUAUCCGACCGGUUAAACUCUUUUGUCCCAUCUUCACUUCCCUGAUUGGAAUUACCGUCCAUCGAGUGGAGGCAUGUACUAGCCUAAAUAUAUCAACAUGCAUUGAGCUUGAGGACUCAAUAAGGUCAGCAACGCCCCAGCCUGCGUCAAACGCACUUCAGUGUCUAUUUUGGUACAUGGAUUGCGCGCGGCGAACCGGUUUCUUUGGCUUGCCAGUGGACCCUAACCGGGGUCGAUGGGGUUUUCCUCAUCCCCAAACGUCCGUAGACUACAUUUGCGUGGCACGUAGUAGUACCAAACUGCCUCGCUCGCCACGUAUUGUUGGUAAAUACCGAGAUCCCGCCAAGAUGAACAACGAUCGCCUCCCGCGUCAUCGCAGGUCGAGAGUCUUGUGCACUAGAGCGGGCCAAACGGGAUCUCCCUCUGACCGGAGCCGUAGCACGCUCUGCCAACAUCCUGCACAUAUCGCUUUCGGUGUGGGCAGUAUCAAGUUUCUCUUUUCUAGCCUACGAAAACACGACUCGAGAACCGCCUCGACACCCUUUAUCUACAUACCCGGGAUACAGAGCUCGAACCAGGUAUGCUCGACGUUAUUCUCUAACGCAUGUGUUUCAACGUCGCUCACCUGUGAAUCUACCCUCCCUGAUAGAACCCCCCUGGGCUUUCUAACGUGGGGGACACCGGCCAUGACAGACCCUACCGCUCAAGAGAAUCGAACCCCGCCUAAGCUAUGGGGGGGGCGGCGCUUUGCCUCUCUCUUUAAUUUAUCUGUUCCAUGGUGUGAUACUGGGGCGGACAAAAUCAUGAUUGUAGGCUCCCUCGCGGAUGAGCUGAUCGUCGGGAAAGCGUGCUUUACGUGUAGGACAGGUAGGGACAUAGAUUACCAGCCGUUUACACCGCGGGCGUAUCGAGGUCGUGAACCUUCGCGCCUGGUAAUUAGCAUUGUUUCUUGCUUAGGAUUAUGGCUCUGGGGAAGCCUUCUAAGGAAAACCAUAAAUCUGUUCAGUCCACUAAGCCCCUCUGAACCGGGGUUAAUAUUUGUCAUCUAUAUAAGGAGCCUCGGAGAGGCCAAGCUUAGUGUGAAGGGUAUCAUAUAUCAUGCUAUAGUCGUCGAGAUGAAGGCAAACGGCCCAAUAUGGCAUCUAGACUUAAGCUGCCAAGGUACGGCGUACGGCCGACCCUUCCGCUGCAUCGUUGCGAGAAUACGCGGAAUUUGCUUUGGUUGUGAAGCGCUGUCCCUAAUAUGGUUGGAAACGCGAAAGUUUCUGUACUAUGUUAAAGUUAGAGUCACUAAAUUCGAAGGCGAUGAACUUGUACCACAUUUGAUCAGCAUUCGCCCCGGCAUCAUUUCAAUAGACCUGCUGUGUCGCUCCCAACCGAGACAAUCAGUUCGUCAACUCAUAGAUGUAGAUUGCCGUGAAAUUAGCUCUAGACAAUUGGGGGGGGCCUUGGUCCCCUGUAUGAUAUUUAUGCAGCACGGUGUUCAUCAACCUACUACAGAGGCUAUAGUUGUGAAUAACCGAGGUGCUCCGGGCUACAAGAGUCAAAGGUCCGCUUCGGCCCAUAUCUUAUCGGCCCUAAAAUUGACAGGGGCAGACUUCAGUUCGUACAGUUUCCUGUACAAGAUCACUCAUGGGAGGCGCGCAAGCGAACUGCCUAGGCUUUUUGCUACCUGUCGCGAAGCCCGUGCUAACGGCCCAUUUUGGAAAGUUCAACCUGGGAAAGAUUGUCGCGGGAACAGUUCGUGUCUCUCGCACAAACCCUAUAGCACUCCUAGUUACCUAGCACCAGCAUUAGAGUGGGCCACGCCGGAACUUGAUUUAAGUUGGUCGGCACUUUCUCUCCCUAACGCGAUUAUGUAUGCUGGUUUUCUCAUCCCGAUUACGCCUGGUGCCUUUACCCGCCAGAAGCACAACCAUAUCACUCCGAACUCUCCCGAAGCCAAAACUGCAUCUCUGGGUUACGUCCUAGAGUUUAUGUCUCCGGGUGGCCGAUGUAGGGACUCGAGAUCCGGGUGUGUUUUUGCGACGUCUCUGUUUCUUGCGGCUUCCGGGGACAACCAGCCGUCAUGGCGGGGACAUAGAUCACAACUGAACCGCUACGUCGUUCAGUCCGACGUUGUACGUUAUAUGCUAUGUAUCGUCUGA"

# def reading_frames(rna_seq):
#     frames = []
#     frames = []
#     frames = []

# def proteins_from_rf (rna_seq):

# def all_proteins_from_rfs(seq, startReadPos=0, endReadPos=0, ordered=False):


# def translate_rna(rna_seq):
#

protein = ""
for i in range(0, len(rna), 3):
    codon = rna[i:i + 3]
    protein += RNA_Codons[codon]
print(protein)


def translate_seq(rna, init_pos=0):
    """translates sequece into amminoacid sequence """
    # if self.seq_type == "DNA":
    #     return [DNA_Codons[self.seq[pos:pos + 3]] for pos in range(init_pos, len(self.seq) - 2, 3)]
    # elif self.seq_type == "RNA":
    return [RNA_Codons[rna[pos:pos + 3]] for pos in range(init_pos, len(rna) - 2, 3)]


print(translate_seq(rna))


# def gen_reading_frames(rna):
#     """generates the six reading frames  (3 from the lagging and 3 from the leading strand)"""
#     frames = []
#     frames.append(translate_seq(0))
#     frames.append(translate_seq(1))
#     frames.append(translate_seq(2))
#     tmp_seq = bio_seq(rna.reverse_complement(), rna.seq_type)
#     frames.append(tmp_seq.translate_seq(0))
#     frames.append(tmp_seq.translate_seq(1))
#     frames.append(tmp_seq.translate_seq(2))
#     del tmp_seq
#     return frames


# print(gen_reading_frames(rna))


# def allproteins_orfs(rna, startReadPos=0, endReadPos=0, ordered=False):
#     """compute all possible proteins for all possible reading frames"""
#     """Protein Search DB: https://www.ncbi.nlm.nih.gov/nuccore/NM_001185097.2"""
#     """API can be used to pull protein info"""
#     if endReadPos > startReadPos:
#         tmp_seq = bio_seq(rna.seq[startRead: endRead], rna.get_type)
#         rfs = tmp_seq.gen_reading_frames()
#     else:
#         rfs = rna.gen_reading_frames()

#     res = []

#     for rf in rfs:
#         prots = rna.proteins_from_rf(rf)
#         for p in prots:
#             res.append(p)

#     if ordered:
#         return sorted(res, key=len, reverse=True)
#     return res


# print(allproteins_orfs(rna))
